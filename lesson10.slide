RabbitMQ

23 декабря 2016

Владимир Ананьев
АО "Программный Регион"
vladimir.ananyev@regium.com

* Для чего это нужно?

- Основная идея очередей – избежать выполнения ресурсоемких задач непосредственно после отправки запроса
- Вместо этого задача ставится в очередь для последующего выполнения в асинхронном режиме

* RabbitMQ - это сервер очередей

- В случае некорректного завершения работы сервера, данные в очереди не теряются. И при последующем запуске обработка продолжается с того места, где был обрыв;
- Можно распределить задачи на несколько очередей, т.е. создать распараллеливание на уровне сообщений;
- Если результат обработки не удовлетворяет, задачу можно послать в очередь повторно (механизм ACK);
- Существует несколько режимов работы очереди: рассылка типа точка-точка (direct), рассылка сообщений по шаблону (topic), широковещательная рассылка сообщений (fanout);
- Количество хранимых в очереди сообщений неограничено;
- Сервер сообщений может быть расположен удаленно как по отношению к продюсеру (producer), так и по отношению к консьюмеру (consumer).

* AMQP

- Advanced Message Queuing Protocol

* Демо запуска сервера из Docker

  docker run -d --hostname my-rabbit --name some-rabbit -p 8080:15672 rabbitmq:3-management

* Hello, World!

.image rmq1.png _ 500

  $ go get github.com/streadway/amqp

- Базовая отправка
- Базовое чтение

Демо: реализация на Golang

* Exchanges

.image rmq2.png _ 500

- Доступные варианты:
- Direct
- Topic
- Headers
- Fanout

Демо: реализация fanout
